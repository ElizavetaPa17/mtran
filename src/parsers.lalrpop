use crate::token::MyToken; 
use crate::ast_utility::{
     print_declaration,
     print_declaration_with_init,
     print_array_declaration,
     print_struct_part_declaration,
     print_bin_operation,
     print_loop,
     print_loop2,
     print_loop3,
     print_condition,
     print_end,
     print_else,
     print_proc_begin1,
     print_proc_head,
     print_proc_return,
     print_function_call,
     print_when_condition,
     print_otherwise_condition,
     print_select
};

grammar;

pub FLT_LIT: MyToken = <s:r"-?\d+\.\d+"> => { 
     MyToken::Literal{ token: "FLOAT".to_string(), lexeme: s.to_string() }
};

pub FLT_EXP_LIT: MyToken = { 
    <s1:r"-?\d+\.\d+E(-?\d+)"> => { 
          MyToken::Literal{ token: "FLOAT".to_string(), lexeme: s1.to_string() }
    },
};

pub UDEC_INT_LIT: MyToken = <s:r"\d+"> => { 
     MyToken::Literal{ token: "UNSIGNED DECIMAL".to_string(), lexeme: s.to_string() }
};
pub DEC_INT_LIT: MyToken = <s:r"-\d+"> => {
     MyToken::Literal{ token: "DECIMAL".to_string(), lexeme: s.to_string() }
};
pub BIN_INT_LIT: MyToken = <s:r"[0-1]+B"> => {
     MyToken::Literal{ token: "BINARY".to_string(),           lexeme: s.to_string() } 
};
pub CHR_LIT: MyToken = <s:r"'([\s\wа-яА-Я\d\.\)\(])+'"> => { 
     MyToken::Literal{ token: "STRING".to_string(), lexeme: s.to_string() } 
};
pub TRUE_BOOL_LIT: MyToken = <s:"TRUE"> => {
     MyToken::Literal{ token: "BOOLEAN".to_string(),          lexeme: s.to_string() }
};
pub FALSE_BOOL_LIT: MyToken = <s:"FALSE"> => { 
     MyToken::Literal{ token: "BOOLEAN".to_string(),          lexeme: s.to_string() }
};

pub DEC_LIT: MyToken = {
     <l:FLT_LIT>      =>  l ,
     <l:FLT_EXP_LIT>  =>  l ,
     <l:UDEC_INT_LIT> =>  l ,
     <l:DEC_INT_LIT>  =>  l ,
     <l:BIN_INT_LIT>  =>  l ,
};

pub LIT_LIT: MyToken = {
     <l:DEC_LIT>         => l,
     <l:CHR_LIT>         => l,
     <l:TRUE_BOOL_LIT>   => l,
     <l:FALSE_BOOL_LIT>  => l,
};
 
pub CHAR_T: Vec<MyToken> = {
     "CHAR" <op:OPEN_PR_DEL> <d:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: "CHAR".to_string() }, op, d, cp]
     }
};


pub CHAR_VAR_T: Vec<MyToken> = {
     "VARYING CHARACTER" <op:OPEN_PR_DEL> <d:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: "VARYING CHARACTER".to_string() }, op, d, cp]
     }
};

pub BIT_T: Vec<MyToken> = {
     "BIT" <op:OPEN_PR_DEL> <d:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: "BIT".to_string() }, op, d, cp]
     }
};

pub FIX_BIN_T: Vec<MyToken> = {
     <s:r"FIXED BIN(ARY)?"> <op:OPEN_PR_DEL> <d:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: s.to_string() }, op, d, cp]
     },
     <s:r"FIXED BIN(ARY)?"> <op:OPEN_PR_DEL> <d1:UDEC_INT_LIT> <del:COMMA_DEL> <d2:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: s.to_string() }, op, d1, del, d2, cp]
     },
};

pub FLT_BIN_T: Vec<MyToken> = {
     <s:r"FLOAT BIN(ARY)?"> <op:OPEN_PR_DEL> <d:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: s.to_string() }, op, d, cp]
     },
     <s:r"FLOAT BIN(ARY)?"> <op:OPEN_PR_DEL> <d1:UDEC_INT_LIT> <del:COMMA_DEL> <d2:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: s.to_string() }, op, d1, del, d2, cp]
     },
};

pub FLT_DEC_T: Vec<MyToken> = {
     r"FLOAT DECIMAL" <op:OPEN_PR_DEL> <d:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: "FLOAT DECIMAL".to_string() }, op, d, cp]
     },
     r"FLOAT DECIMAL" <op:OPEN_PR_DEL> <d1:UDEC_INT_LIT> <del:COMMA_DEL> <d2:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: "FLOAT DECIMAL".to_string() }, op, d1, del, d2, cp]
     },
};

pub FIX_DEC_T: Vec<MyToken> = {
     r"FIXED DECIMAL" <op:OPEN_PR_DEL> <d:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: "FIXED DECIMAL".to_string() }, op, d, cp]
     },
     r"FIXED DECIMAL" <op:OPEN_PR_DEL> <d1:UDEC_INT_LIT> <del:COMMA_DEL> <d2:UDEC_INT_LIT> <cp:CLOS_PR_DEL> => { 
          vec![MyToken::Type{ token: "TYPE".to_string(), lexeme: "FIXED DECIMAL".to_string() }, op, d1, del, d2, cp]
     },
};

pub ARRAY_DIMEN: Vec<MyToken> = {
     <d:UDEC_INT_LIT> <del:COMMA_DEL> <a:ARRAY_DIMEN> => {
          let mut output = vec![d, del];
          output.extend(a);
          output
     },

     <d:UDEC_INT_LIT> => {
          vec![d]
     }
}

pub ARRAY_T: Vec<MyToken> = {
     <id:IDENT> <del1:OPEN_PR_DEL> <dim:ARRAY_DIMEN> <del2:CLOS_PR_DEL> "LIKE" <del3:OPEN_PR_DEL> <t:TYPE_T> <del4:CLOS_PR_DEL> =>  { 
          let mut output = vec![id, del1];
          output.extend(dim);
          output.push(del2);
          output.push(MyToken::Keywoard{ token: "LIKE".to_string(), lexeme: "LIKE".to_string() });
          output.push(del3);
          output.extend(t);
          output.push(del4);

          print_array_declaration(&output);

          output
     },

     <id:IDENT> <del1:OPEN_PR_DEL> <dim:ARRAY_DIMEN> <del2:CLOS_PR_DEL> "LIKE" <del3:OPEN_PR_DEL> <t:IDENT> <del4:CLOS_PR_DEL> =>  { 
          let mut output = vec![id, del1];
          output.extend(dim);
          output.push(del2);
          output.push(MyToken::Keywoard{ token: "LIKE".to_string(), lexeme: "LIKE".to_string() });
          output.push(del3);
          output.push(t);
          output.push(del4);

          print_array_declaration(&output);

          output
     },
}

TYPE_T: Vec<MyToken> = {
     <t:CHAR_T>     => t,
     <t:CHAR_VAR_T> => t,
     <t:BIT_T>      => t,
     <t:FIX_BIN_T>  => t,
     <t:FLT_BIN_T>  => t,
     <t:FIX_DEC_T>  => t,
     <t:FLT_DEC_T>  => t,
     "LOGICAL" => vec![MyToken::Type{ token: "LOGICAL".to_string(), lexeme: "LOGICAL".to_string() }],
     "POINTER" => vec![MyToken::Type{ token: "POINTER".to_string(), lexeme: "POINTER".to_string() }],
     "INTEGER" => vec![MyToken::Type{ token: "INTEGER".to_string(), lexeme: "INTEGER".to_string() }]
};


STRUCT_INNER: Vec<MyToken> = {
    <level:UDEC_INT_LIT> <id:IDENT> <t:TYPE_T> <del:COMMA_DEL> <c:STRUCT_INNER> => {
       let mut output = vec![level, id];
       output.extend(t);
       output.push(del);

       print_struct_part_declaration(&output);

       output.extend(c);
       output
    },
    <level:UDEC_INT_LIT> <arr:ARRAY_T> <del:COMMA_DEL> <c:STRUCT_INNER> => {
       let mut output = vec![level];
       output.extend(arr);
       output.push(del);
       output.extend(c);
       output
    },
    <level:UDEC_INT_LIT> <id:IDENT> <del:COMMA_DEL> <c:STRUCT_INNER> => {
       let mut output = vec![level, id, del];

       print_struct_part_declaration(&output);

       output.extend(c);
       output
    },
    <end_del:STRUCT_END> => end_del
};

STRUCT_END: Vec<MyToken> = {
    <level:UDEC_INT_LIT> <id:IDENT> <t:TYPE_T> <end_del:INSTRUC_DEL> => {
       let mut output = vec![level, id];
       output.extend(t);
       output.push(end_del);

       print_struct_part_declaration(&output);

       output
    },
    <level:UDEC_INT_LIT> <arr:ARRAY_T> <end_del:INSTRUC_DEL> => {
       let mut output = vec![level];
       output.extend(arr);
       output.push(end_del);
       output
    },
    <level:UDEC_INT_LIT> <id:IDENT> <end_del:INSTRUC_DEL> => {
       let output = vec![level, id, end_del];

       print_struct_part_declaration(&output);

       output
    },
};

pub STRUCT_T: Vec<MyToken> = {
     <c:STRUCT_INNER> => {
       let output = c;
       output
    }
};

pub OPEN_PR_DEL: MyToken = <s:"("> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };
pub CLOS_PR_DEL: MyToken = <s:")"> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };
pub OPEN_BR_DEL: MyToken = <s:"["> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };
pub CLOS_BR_DEL: MyToken = <s:"]"> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };
pub INSTRUC_DEL: MyToken = <s:";"> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };
pub PROC_DEL:    MyToken = <s:":"> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };
pub COMMA_DEL:   MyToken = <s:","> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };
pub ASSIGN_DEL:  MyToken = <s:"="> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };
pub FIELD_DEL:   MyToken = <s:"."> => MyToken::Delimiter{ token: s.to_string(), lexeme: s.to_string() };

pub DEL_DEL: MyToken = {
     <del:OPEN_PR_DEL> => del,
     <del:CLOS_PR_DEL> => del,
     <del:OPEN_BR_DEL> => del,
     <del:CLOS_BR_DEL> => del,
     <del:INSTRUC_DEL> => del,
     <del:COMMA_DEL>   => del,
     <del:ASSIGN_DEL>  => del,
     <del:FIELD_DEL>   => del,
};

pub PLUS_OP:    MyToken = <s:"+"> =>   MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub MIN_OP:     MyToken = <s:"-">  =>  MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub MUL_OP:     MyToken = <s:"*"> =>   MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub DIV_OP:     MyToken = <s:"/">  =>  MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub MOD_OP:     MyToken = <s:"%"> =>   MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub AND_BIT_OP: MyToken = <s:"&">  =>  MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub OR_BIT_OP:  MyToken = <s:"|"> =>   MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub XOR_BIT_OP: MyToken = <s:"^"> =>   MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub AND_CND_OP: MyToken = <s:"&&"> =>  MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub OR_CND_OP:  MyToken = <s:"||"> =>  MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub NEG_OP:     MyToken = <s:"!"> =>   MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };

pub EQ_CMP: MyToken = <s:"=="> => MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub NQ_CMP: MyToken = <s:"!="> => MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub LS_CMP: MyToken = <s:"<"> =>  MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub GR_CMP: MyToken = <s:">"> =>  MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub LE_CMP: MyToken = <s:"<="> => MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };
pub GE_CMP: MyToken = <s:">="> => MyToken::BinOperator{ token: s.to_string(), lexeme: s.to_string() };

pub CMP_OP: MyToken = {
     <tok:EQ_CMP> => tok,
     <tok:NQ_CMP> => tok,
     <tok:LS_CMP> => tok,
     <tok:GR_CMP> => tok,
     <tok:LE_CMP> => tok,
     <tok:GE_CMP> => tok
};

pub BIT_OP: MyToken = {
     <tok:AND_BIT_OP> => tok,
     <tok:OR_BIT_OP> => tok,
     <tok:XOR_BIT_OP> => tok,
     <tok:NEG_OP> => tok
};

pub CND_OP: MyToken = {
     <tok:AND_CND_OP> => tok,
     <tok:OR_CND_OP> => tok
};

pub INIT_CONSTR: Vec<MyToken> = { 
   <s:"INIT"> <op:OPEN_PR_DEL> <d1:LIT_LIT> <del:COMMA_DEL> <d2:LIT_LIT> <cp:CLOS_PR_DEL> => {
     vec![MyToken::Keywoard{ token: s.to_string(), lexeme: s.to_string() }, op, d1, del, d2, cp]
   },
   <s:"INIT"> <op:OPEN_PR_DEL> <d:LIT_LIT> <cp:CLOS_PR_DEL> => {
      vec![MyToken::Keywoard{ token: s.to_string(), lexeme: s.to_string() }, op, d, cp]
   },
};

pub IDENT: MyToken = { 
     <s:r"[a-zA-Z]+([a-zA-Z0-9_])*"> => {
          MyToken::Identification{ token: "IDENTIFICATOR".to_string(), lexeme: s.to_string() } 
     }
};

pub PROCEDURE_PARAMS: Vec<MyToken> = {
     <id:IDENT> <del:COMMA_DEL> <a:PROCEDURE_PARAMS> => {
          let mut output = vec![id, del];
          output.extend(a);
          output
     },

     <id:IDENT> => {
          vec![id]
     }
}

pub DECLARATION: Vec<MyToken> = { 
     r"DCL\s+" <id:IDENT> <t:TYPE_T> <end_del:INSTRUC_DEL> =>  { 
          let mut output = vec![MyToken::Keywoard{ token: "DCL".to_string(), lexeme: "DCL".to_string() }, id];
          output.extend(t);
          output.push(end_del);
          print_declaration(&output);

          output
     },
     r"DCL\s+" <id:IDENT> <t:TYPE_T> <i:INIT_CONSTR> <end_del:INSTRUC_DEL> =>  { 
          let mut output = vec![MyToken::Keywoard{ token: "DCL".to_string(), lexeme: "DCL".to_string() }, id];
          output.extend(t);
          output.extend(i);
          output.push(end_del);
          print_declaration_with_init(&output);

          output
     },

     r"DCL\s+" <st:STRUCT_T> =>  { 
          let mut output = vec![MyToken::Keywoard{ token: "DCL".to_string(), lexeme: "DCL".to_string() }];
          output.extend(st);
          output
     },

     r"DCL\s+" <a:ARRAY_T> <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "DCL".to_string(), lexeme: "DCL".to_string() }];
          output.extend(a);
          output.push(end_del);
          output
     },

     <id:IDENT> <del0:PROC_DEL>
     "PROCEDURE" <del1:OPEN_PR_DEL> <params:PROCEDURE_PARAMS> <del2:CLOS_PR_DEL> 
     "RETURNS" <del3:OPEN_PR_DEL> <t:TYPE_T> <del4:CLOS_PR_DEL> <end_del:INSTRUC_DEL> => {
          let mut output = vec![id, del0, MyToken::Keywoard{ token: "PROCEDURE".to_string(), lexeme: "PROCEDURE".to_string() }, del1];
          output.extend(params);
          output.extend(vec![del2, MyToken::Keywoard{ token: "RETURNS".to_string(), lexeme: "RETURNS".to_string() }, del3]);
          output.extend(t);
          output.extend(vec![del4, end_del]);
          print_proc_begin1(&output);
          print_proc_head(&output);

          output
     },

     <id:IDENT> <del0:PROC_DEL>
     "PROCEDURE" <del1:OPEN_PR_DEL> <params:PROCEDURE_PARAMS> <del2:CLOS_PR_DEL> 
     "RETURNS" <del3:OPEN_PR_DEL> <id2:IDENT> <del4:CLOS_PR_DEL> <end_del:INSTRUC_DEL> => {
          let mut output = vec![id, del0, MyToken::Keywoard{ token: "PROCEDURE".to_string(), lexeme: "PROCEDURE".to_string() }, del1];
          output.extend(params);
          output.extend(vec![del2, MyToken::Keywoard{ token: "RETURNS".to_string(), lexeme: "RETURNS".to_string() }, del3, id2, del4, end_del]);
          print_proc_begin1(&output);
          print_proc_head(&output);
     
          output
     },

     <id:IDENT> <del0:PROC_DEL>
     "PROCEDURE" <del1:OPEN_PR_DEL> <params:PROCEDURE_PARAMS> <del2:CLOS_PR_DEL> <end_del:INSTRUC_DEL> => {
          let mut output = vec![id, del0, MyToken::Keywoard{ token: "PROCEDURE".to_string(), lexeme: "PROCEDURE".to_string() }, del1];
          output.extend(params);
          output.extend(vec![del2, end_del]);
          print_proc_begin1(&output);
          print_proc_head(&output);

          output
     },

     <id:IDENT> <del0:PROC_DEL> "PROCEDURE" <end_del:INSTRUC_DEL> => {
          let output = vec![id, del0, MyToken::Keywoard{ token: "PROCEDURE".to_string(), lexeme: "PROCEDURE".to_string() }, end_del];
          print_proc_begin1(&output);

          output
     },

     <id:IDENT> <del0:PROC_DEL> r"PROCEDURE\s+RETURNS" <del3:OPEN_PR_DEL> <id2:IDENT> <del4:CLOS_PR_DEL> <end_del:INSTRUC_DEL> => {
          let mut output = vec![id, del0, MyToken::Keywoard{ token: "PROCEDURE".to_string(), lexeme: "PROCEDURE".to_string() }];
          output.extend(vec![MyToken::Keywoard{ token: "RETURNS".to_string(), lexeme: "RETURNS".to_string() }, del3, id2, del4, end_del]);
          print_proc_begin1(&output);
          print_proc_head(&output);

          output
     },

     <id:IDENT> <del0:PROC_DEL>  r"PROCEDURE\s+RETURNS" <del3:OPEN_PR_DEL> <t:TYPE_T> <del4:CLOS_PR_DEL> <end_del:INSTRUC_DEL> => {
          let mut output = vec![id, del0, MyToken::Keywoard{ token: "PROCEDURE".to_string(), lexeme: "PROCEDURE".to_string() }];
          output.extend(vec![MyToken::Keywoard{ token: "RETURNS".to_string(), lexeme: "RETURNS".to_string() }, del3]);
          output.extend(t);
          output.extend(vec![del4, end_del]);
          print_proc_begin1(&output);
          print_proc_head(&output);

          output
     }
};

pub EXPR: Vec<MyToken> = {
     #[precedence(level="0")]
     <expr:IDENT> => {
          vec![expr]
     },

     #[precedence(level="0")]
     <expr:LIT_LIT> => {
          vec![expr]
     },

     #[precedence(level="1")] #[assoc(side="left")]
     <exp1:EXPR> <op:FIELD_DEL> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); output
     },

     #[precedence(level="1")] #[assoc(side="left")]
     <id:IDENT> <del1:OPEN_BR_DEL> <exp:EXPR> <del2:CLOS_BR_DEL> => {
          let mut output = vec![id, del1]; output.extend(exp); output.push(del2); output
     },

     #[precedence(level="2")] #[assoc(side="left")]
     <exp1:EXPR> <op:MUL_OP> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="2")] #[assoc(side="left")]
     <exp1:EXPR> <op:DIV_OP> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="2")] #[assoc(side="left")]
     <exp1:EXPR> <op:MOD_OP> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="3")] #[assoc(side="left")]
     <exp1:EXPR> <op:PLUS_OP> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="3")] #[assoc(side="left")]
     <exp1:EXPR> <op:MIN_OP> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="4")] #[assoc(side="left")]
     <exp1:EXPR> <op:CMP_OP> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="5")] #[assoc(side="left")]
     <exp1:EXPR> <op:BIT_OP> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="6")] #[assoc(side="left")]
     <exp1:EXPR> <op:CND_OP> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="7")] #[assoc(side="left")]
     <exp1:EXPR> <op:COMMA_DEL> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="8")] #[assoc(side="left")]
     <id:IDENT> <del1:OPEN_PR_DEL> <exp2:EXPR> <del2:CLOS_PR_DEL> => {
          let mut output = vec![id]; output.push(del1); output.extend(exp2); output.push(del2); output
     },

     #[precedence(level="9")] #[assoc(side="right")]
     <exp1:EXPR> <op:ASSIGN_DEL> <exp2:EXPR> => {
          let mut output = exp1; output.push(op); output.extend(exp2); print_bin_operation(&output); output
     },

     #[precedence(level="9")] #[assoc(side="left")]
     <del1:OPEN_PR_DEL> <exp:EXPR> <del2:CLOS_PR_DEL> => {
          let mut output = vec![del1]; output.extend(exp); output.push(del2); output
     },

     #[precedence(level="9")] #[assoc(side="left")]
     r"CALL\s+" <id:IDENT> <del1:OPEN_PR_DEL> <arr:EXPR> <del2:CLOS_PR_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "CALL".to_string(), lexeme: "CALL".to_string() } , id]; output.push(del1); output.extend(arr); output.push(del2); print_function_call(&output); output
     },

     #[precedence(level="9")] #[assoc(side="left")]
     r"CALL\s+" <id:IDENT> <del1:OPEN_PR_DEL> <del2:CLOS_PR_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "CALL".to_string(), lexeme: "CALL".to_string() } , id]; output.push(del1);  output.push(del2); print_function_call(&output); output
     },

     #[precedence(level="11")] #[assoc(side="left")]
     <exp1:EXPR> <op:INSTRUC_DEL> => {
          let mut output = exp1; output.push(op); output
     },
};

pub CYCLE: Vec<MyToken> = {
     r"DO\s+" <exp1:IDENT> <del:ASSIGN_DEL> <exp2:EXPR> "TO" <exp3:EXPR> <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "DO".to_string(), lexeme: "DO".to_string() }, exp1, del];
          output.extend(exp2);
          output.push(MyToken::Keywoard{ token: "TO".to_string(), lexeme: "TO".to_string() }); 
          output.extend(exp3);
          output.push(end_del); 
          output
     },

     r"DO\s+" <exp1:IDENT> <del:ASSIGN_DEL> <exp2:EXPR> "TO" <exp3:EXPR> "BY" <exp4:EXPR> <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "DO".to_string(), lexeme: "DO".to_string() }, exp1, del];
          output.extend(exp2);
          output.push(MyToken::Keywoard{ token: "TO".to_string(), lexeme: "TO".to_string() }); 
          output.extend(exp3);
          output.push(MyToken::Keywoard{ token: "BY".to_string(), lexeme: "BY".to_string() }); 
          output.extend(exp4);
          output.push(end_del); 

          print_loop(&output);

          output
     },

     r"DO\s+WHILE\s*" <exp:EXPR>  <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "DO WHILE".to_string(), lexeme: "DO WHILE".to_string() }];
          output.extend(exp);
          output.push(end_del);
          print_loop2(&output);

          output
     },

     r"DO\s+UNTIL\s+" <exp:EXPR>  <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "DO UNTIL".to_string(), lexeme: "DO UNTIL".to_string() }];
          output.extend(exp);
          output.push(end_del);
          print_loop2(&output);

          output
     },

     r"DO\s+FOREVER\s*" <end_del:INSTRUC_DEL> => {
          let output = vec![MyToken::Keywoard{ token: "DO FOREVER".to_string(), lexeme: "DO FOREVER".to_string() }];
          print_loop3(&output);

          output
     },
};

pub CONDITION: Vec<MyToken> = {
     r"IF\s+" <exp1:EXPR> r"THEN\s+" <exp2:EXPR> <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "IF".to_string(), lexeme: "IF".to_string() }];
          output.extend(exp1);
          output.push(MyToken::Keywoard{ token: "THEN".to_string(), lexeme: "THEN".to_string() });
          output.extend(exp2);
          output.push(end_del);

          print_condition(&output);

          output
     },

     r"ELSE\s+" <exp:EXPR> <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "ELSE".to_string(), lexeme: "ELSE".to_string() }];
          output.extend(exp);
          output.push(end_del);
          print_else(&output);

          output
     },

     r"WHEN\s+" <exp:EXPR> <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "WHEN".to_string(), lexeme: "WHEN".to_string() }];
          output.extend(exp);
          output.push(end_del);
          print_when_condition(&output);

          output
     },

     r"OTHERWISE\s+" <exp:EXPR> <end_del:INSTRUC_DEL> => {
          let mut output = vec![MyToken::Keywoard{ token: "OTHERWISE".to_string(), lexeme: "OTHERWISE".to_string() }];
          output.extend(exp);
          output.push(end_del);
          print_otherwise_condition(&output);

          output
     },
};

pub END_INSTR: Vec<MyToken> = {
     "END" <end_del:INSTRUC_DEL> => {
          let output = vec![MyToken::Keywoard{ token: "END".to_string(), lexeme: "END".to_string() }, end_del];
          print_end();

          output
     },
     "END" <id:IDENT> <end_del:INSTRUC_DEL> => {
          let output = vec![MyToken::Keywoard{ token: "END".to_string(), lexeme: "END".to_string() }, id, end_del];
          print_end();

          output
     }
}

pub INSTRUCTION: Vec<MyToken> = {
     <decl:DECLARATION> => decl,
     <cycl:CYCLE>       => cycl,
     <expr:EXPR>        => expr,
     <cond:CONDITION>   => cond,
     <end_inst:END_INSTR> => end_inst,
     "RETURN" <exp:EXPR> => {
          let mut output = vec![MyToken::Keywoard{ token: "RETURN".to_string(), lexeme: "RETURN".to_string() }]; output.extend(exp); print_proc_return(&output); output
     },

     "RETURN" <end_del:INSTRUC_DEL> => {
          let output = vec![MyToken::Keywoard{ token: "RETURN".to_string(), lexeme: "RETURN".to_string() }, end_del]; output
     },

     "SELECT" <end_del:INSTRUC_DEL> => {
          let output = vec![MyToken::Keywoard{ token: "SELECT".to_string(), lexeme: "SELECT".to_string() }, end_del];
          print_select(&output);
          output
     },

     <end_del:INSTRUC_DEL> => {
          let output = vec![end_del]; output
     },
};